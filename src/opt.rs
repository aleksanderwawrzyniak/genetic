use crate::data_structures::algorithm_configuration::AlgorithmConfiguration as Configuration;

#[derive(Debug, StructOpt)]
#[structopt(
    name = "genetic algorithm",
    about = "A laboratory task for Introduction to Artificial Intelligence"
)]
pub enum Opt {
    /// Generates csv file with random weight, size and cost values for n entities
    Generate(Generate),

    /// Reads values from file, parses it and creates `Task` instance. Generally, use just for debugging purposes!
    Read(Read),

    /// Loads the tasks and initialize the population. Generally, use just for debugging purposes!
    Init(Init),

    /// Run the algorithm
    Evolve(Configuration),
}

#[derive(StructOpt, Debug)]
pub struct Generate {
    ///number of items to generate
    pub number_of_items: usize,

    /// max carrying capacity of the knapsack
    pub max_weight: usize,

    /// max size of the knapsack   
    pub max_size: usize,

    /// generation multiplier
    pub multiplier: usize,

    /// Output file for the generated values
    pub output_file: Option<String>,
}

#[derive(StructOpt, Debug)]
pub struct Read {
    /// path to CSV file generated by the `Generate` sub command
    pub file_name: Option<String>,
}

#[derive(StructOpt, Debug)]
pub struct Init {
    /// The size of the population
    pub size: usize,

    /// The density of the population - defines, statistically,
    /// how many ones will be in the initial population
    /// the higher the value, the lower the density
    pub density: usize,

    /// File with generated tasks
    pub file_name: Option<String>,
}
